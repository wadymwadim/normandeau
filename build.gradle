apply plugin: 'application'
apply plugin: 'cpp'
//apply plugin: 'findbugs'

mainClassName = 'billiards.viewer.Main'

repositories {
    jcenter()
}

dependencies {
    compile 'org.eclipse.collections:eclipse-collections-api:9.2.0'
    compile 'org.eclipse.collections:eclipse-collections:9.2.0'
    compile 'com.google.guava:guava:26.0-jre'
    compile 'org.apache.commons:commons-math3:3.6.1'
    compile 'org.apache.commons:commons-lang3:3.7'
    compile 'io.javaslang:javaslang:2.0.5'
    compile 'net.java.dev.jna:jna:4.5.2'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.2.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.2.0'
}

test {
    useJUnitPlatform()
}

compileJava {
    options.compilerArgs << '-Xlint' << '-Werror'
}

jar {
    baseName = 'billiard-viewer'
    manifest.attributes 'Main-Class': 'billiards.viewer.Main'
}

sourceSets {
    main {
        java {
            srcDir 'src/java'
        }
    }
}

applicationDefaultJvmArgs = ['-server', '-Djna.library.path=./build/libs/backend/shared']

sourceCompatibility = 1.8
targetCompatibility = 1.8

model {

    components {

        backend(NativeLibrarySpec) {

            binaries.all {

                cppCompiler.define "NDEBUG"
                cppCompiler.args '-O3', '-march=native', '-flto', '-ftrapv'
                linker.args '-lgmp', '-lmpfr', '-ltbb'

                if (toolChain in Clang) {
                    cppCompiler.args '-Weverything', '-Werror',
                                     '-Wno-padded', '-Wno-comma',
                                     '-Wno-exit-time-destructors', '-Wno-global-constructors',
                                     '-Wno-c++98-compat', '-Wno-c++98-compat-pedantic',
                                     '-std=c++14'

                } else if (toolChain in Gcc) {
                    cppCompiler.args '-Wall', '-Wextra', '-Wpedantic', '-Werror',
                                     '-Wno-c++11-compat', '-Wno-c++14-compat',
                                     '-std=c++14'
                    linker.args '-lpthread'
                } else {
                    println 'compiler unsupported; please use GCC or Clang'
                }
            }
        }

        cover(NativeExecutableSpec) {

            sources.cpp {
                lib library: 'backend', linkage: 'static'
            }

            binaries.all {

                cppCompiler.define "NDEBUG"
                cppCompiler.args '-O3', '-march=native', '-flto', '-ftrapv'
                linker.args '-lgmp', '-lmpfr', '-ltbb'

                if (toolChain in Clang) {
                    cppCompiler.args '-Weverything', '-Werror',
                                     '-Wno-padded', '-Wno-comma',
                                     '-Wno-exit-time-destructors', '-Wno-global-constructors',
                                     '-Wno-c++98-compat', '-Wno-c++98-compat-pedantic',
                                     '-std=c++14'

                } else if (toolChain in Gcc) {
                    cppCompiler.args '-Wall', '-Wextra', '-Wpedantic', '-Werror',
                                     '-Wno-c++11-compat', '-Wno-c++14-compat',
                                     '-std=c++14'
                    linker.args '-lpthread'
                } else {
                    println 'compiler unsupported; please use GCC or Clang'
                }
            }
        }
    }
}

// Make sure the C++ code is up to date when running the Java program
run.dependsOn "backendSharedLibrary"
run.dependsOn "coverExecutable"
